C51 COMPILER V9.56.0.0   BSP_SEG                                                           03/05/2021 07:55:18 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE BSP_SEG
OBJECT MODULE PLACED IN .\Objects\bsp_seg.obj
COMPILER INVOKED BY: D:\10.1 keil51\C51\BIN\C51.EXE ..\..\Driver\bsp_seg.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\..\Driver;
                    -..\..\Sys) DEBUG OBJECTEXTEND PRINT(.\Listings\bsp_seg.lst) TABS(2) OBJECT(.\Objects\bsp_seg.obj)

line level    source

   1          # include "bsp_seg.h"
   2          
   3          //函数名：“字符串”到“数码管段码”的转换函数
   4          //入口参数：seg_string（10个字节）待转换的字符串；将转换完的段码存到seg_buf（8个字节）里
   5          //返回值：无
   6          //函数功能：将seg_string的各个位转换为数码管段码，存储到seg_buf数组中。
   7          void Seg_Tran(unsigned char *seg_string, unsigned char *seg_buf)
   8          {
   9   1        unsigned char i=0;//buf[i],i=0~7
  10   1        unsigned char j=0;//seg_string[j],j=0~10  
  11   1        unsigned char temp;//字符串转换为段码的中间存储变量
  12   1        
  13   1        for(i=0;i<=7;i++,j++)
  14   1        {
  15   2          switch(seg_string[j])
  16   2          {
  17   3            case '0': temp = 0xc0; break;     
  18   3            case '1': temp = 0xf9; break;     
  19   3            case '2': temp = 0xa4; break;     
  20   3            case '3': temp = 0xb0; break;   
  21   3            case '4': temp = 0x99; break;     
  22   3            case '5': temp = 0x92; break;   
  23   3            case '6': temp = 0x82; break;     
  24   3            case '7': temp = 0xf8; break;   
  25   3            case '8': temp = 0x80; break;     
  26   3            case '9': temp = 0x90; break;   
  27   3                
  28   3            case 'A': temp = 0x88; break;
  29   3            case 'B': temp = 0x83; break;
  30   3            case 'C': temp = 0xc6; break;
  31   3            case 'D': temp = 0xA1; break;
  32   3            case 'E': temp = 0x86; break;
  33   3            case 'F': temp = 0x8E; break;
  34   3            
  35   3            case 'H': temp = 0x89; break;
  36   3            case 'L': temp = 0xC7; break;
  37   3            case 'N': temp = 0xC8; break;
  38   3            case 'P': temp = 0x8c; break;
  39   3            case 'U': temp = 0xC1; break;
  40   3            
  41   3            case '-': temp = 0xbf; break;
  42   3            case ' ': temp = 0xff; break;   
  43   3            
  44   3            default : temp = 0xff; break;
  45   3          
  46   3          }
  47   2        
  48   2          if(seg_string[j+1] == '.')//如果字符串里边出现了‘.’，要把刚刚出炉的temp值改变。
  49   2          {
  50   3            temp &= 0x7f;//把dp位点亮
  51   3            j++;//跳过带'.'的位置
  52   3          }
  53   2          
  54   2          seg_buf[i] = temp;//将转换后的段码值传递给Buf存储。
C51 COMPILER V9.56.0.0   BSP_SEG                                                           03/05/2021 07:55:18 PAGE 2   

  55   2      
  56   2        }
  57   1      }
  58          
  59          
  60          
  61          //函数名：将“段码数组”的第N位显示。
  62          //入口参数：seg_buf（8个字节）是转换完的段码; pos待显示的seg_buf第pos位。
  63          //返回值：无
  64          //函数功能：将seg_buf的第pos位显示在数码管的第pos位
  65          void Seg_Disp(unsigned char *seg_buf, unsigned char pos)
  66          {
  67   1        
  68   1      
  69   1        
  70   1        P0 = 1<<pos;//位码送入
  71   1        P2 = P2 & 0x1F | 0xC0; // 0xC0，选通Y6，也就是位码的锁存器，将数据透传过去
  72   1        P2 &= 0x1F; //将打开的锁存器关闭，使任何一个锁存器都不打开  
  73   1        
  74   1        P0 = 0xff;//清空屏幕
  75   1        P2 = P2 & 0x1F | 0xE0; // 0xE0，选通Y7，也就是段码的锁存器，将数据透传过去
  76   1        P2 &= 0x1F; //将打开的锁存器关闭，使任何一个锁存器都不打开    
  77   1        
  78   1        P0 = seg_buf[pos];//段码送入
  79   1        P2 = P2 & 0x1F | 0xE0; // 0xE0，选通Y7，也就是段码的锁存器，将数据透传过去
  80   1        P2 &= 0x1F; //将打开的锁存器关闭，使任何一个锁存器都不打开
  81   1      }
  82          
  83          
  84          
  85          
  86          
  87          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    338    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       9
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
