C51 COMPILER V9.56.0.0   BSP_IIC                                                           03/01/2021 15:46:39 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE BSP_IIC
OBJECT MODULE PLACED IN .\Objects\bsp_iic.obj
COMPILER INVOKED BY: D:\10.1 keil51\C51\BIN\C51.EXE ..\..\Driver\bsp_iic.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\..\Driver;
                    -..\..\Sys) DEBUG OBJECTEXTEND PRINT(.\Listings\bsp_iic.lst) TABS(2) OBJECT(.\Objects\bsp_iic.obj)

line level    source

   1          #include "bsp_iic.h"
   2          
   3          //总线引脚定义
   4          sbit SDA = P2^1;  /* 数据线 */
   5          sbit SCL = P2^0;  /* 时钟线 */
   6          
   7          void IIC_Delay(unsigned char i)
   8          {
   9   1          do{_nop_();}
  10   1          while(i--);        
  11   1      }
  12          
  13          //总线启动条件
  14          void IIC_Start(void)
  15          {
  16   1          SDA = 1;
  17   1          SCL = 1;
  18   1          IIC_Delay(DELAY_TIME);
  19   1          SDA = 0;
  20   1          IIC_Delay(DELAY_TIME);
  21   1          SCL = 0;  
  22   1      }
  23          
  24          //总线停止条件
  25          void IIC_Stop(void)
  26          {
  27   1          SDA = 0;
  28   1          SCL = 1;
  29   1          IIC_Delay(DELAY_TIME);
  30   1          SDA = 1;
  31   1          IIC_Delay(DELAY_TIME);
  32   1      }
  33          
  34          //发送应答
  35          void IIC_SendAck(bit ackbit)
  36          {
  37   1          SCL = 0;
  38   1          SDA = ackbit;           // 0：应答，1：非应答
  39   1          IIC_Delay(DELAY_TIME);
  40   1          SCL = 1;
  41   1          IIC_Delay(DELAY_TIME);
  42   1          SCL = 0; 
  43   1          SDA = 1;
  44   1          IIC_Delay(DELAY_TIME);
  45   1      }
  46          
  47          //等待应答
  48          bit IIC_WaitAck(void)
  49          {
  50   1          bit ackbit;
  51   1        
  52   1          SCL  = 1;
  53   1          IIC_Delay(DELAY_TIME);
  54   1          ackbit = SDA;
C51 COMPILER V9.56.0.0   BSP_IIC                                                           03/01/2021 15:46:39 PAGE 2   

  55   1          SCL = 0;
  56   1          IIC_Delay(DELAY_TIME);
  57   1          return ackbit;
  58   1      }
  59          
  60          //通过I2C总线发送数据
  61          void IIC_SendByte(unsigned char byt)
  62          {
  63   1          unsigned char i;
  64   1      
  65   1          for(i=0; i<8; i++)
  66   1          {
  67   2              SCL  = 0;
  68   2              IIC_Delay(DELAY_TIME);
  69   2              if(byt & 0x80) SDA  = 1;
  70   2              else SDA  = 0;
  71   2              IIC_Delay(DELAY_TIME);
  72   2              SCL = 1;
  73   2              byt <<= 1;
  74   2              IIC_Delay(DELAY_TIME);
  75   2          }
  76   1          SCL  = 0;  
  77   1      }
  78          
  79          //从I2C总线上接收数据
  80          unsigned char IIC_RecByte(void)
  81          {
  82   1          unsigned char i, da;
  83   1          for(i=0; i<8; i++)
  84   1          {   
  85   2            SCL = 1;
  86   2        IIC_Delay(DELAY_TIME);
  87   2        da <<= 1;
  88   2        if(SDA) da |= 1;
  89   2        SCL = 0;
  90   2        IIC_Delay(DELAY_TIME);
  91   2          }
  92   1          return da;    
  93   1      }
  94          
  95          
  96          //函数名：ADC转换函数
  97          //入口参数：要进行转换的通道控制位
  98          //返回值：ADC转换的数值
  99          //函数功能：对指定的通道进行ADC转换，函数返回转换的数值
 100          unsigned char Pcf8591_Adc(unsigned char channel_num_contrl)
 101          {
 102   1        unsigned char temp;
 103   1        
 104   1        IIC_Start();//发送开启信号
 105   1        IIC_SendByte(0x90);//选择PCF8591芯片，确定写的模式
 106   1        IIC_WaitAck();//等待PCF8591反馈
 107   1        
 108   1        IIC_SendByte(channel_num_contrl);//确定要转换的通道（顺便，使能DA转换）
 109   1        IIC_WaitAck();//等待PCF8591反馈 
 110   1        
 111   1        IIC_Start();//发送开启信号
 112   1        IIC_SendByte(0x91);//选择PCF8591芯片，确定读的模式
 113   1        IIC_WaitAck();//等待PCF8591反馈 
 114   1          
 115   1        temp = IIC_RecByte();//接收数据
 116   1        IIC_SendAck(1);//选择不应答
C51 COMPILER V9.56.0.0   BSP_IIC                                                           03/01/2021 15:46:39 PAGE 3   

 117   1        IIC_Stop();//停止发送
 118   1        
 119   1        return temp;
 120   1      
 121   1      }
 122          
 123          
 124          
 125          //函数名：DAC转换函数
 126          //入口参数：要进行转换的数值
 127          //返回值：无
 128          //函数功能：对入口参数要转换的DA数据进行转换
 129          void Pcf8591_Dac(unsigned char trans_dat)
 130          {
 131   1        IIC_Start();//发送开启信号
 132   1        IIC_SendByte(0x90);//选择PCF8591芯片，确定写的模式
 133   1        IIC_WaitAck();//等待PCF8591反馈
 134   1        
 135   1        IIC_SendByte(0x41);//使能DA转换（随便写通道编号，不影响，主要的功能是使能DA）
 136   1        IIC_WaitAck();//等待PCF8591反馈   
 137   1      
 138   1        IIC_SendByte(trans_dat);//将待转换的数据发送出去
 139   1        IIC_WaitAck();//等待PCF8591反馈 
 140   1        IIC_Stop();//停止发送 
 141   1      
 142   1      }
 143          
 144          
 145          
 146          //函数名：写EEPROM函数
 147          //入口参数：需要写入的字符串，写入的地址(务必为8的倍数)，写入数量
 148          //返回值：无
 149          //函数功能：向EERPOM的某个地址写入字符串中特定数量的字符。
 150          void EEPROM_Write(unsigned char* EEPROM_String, unsigned char addr, unsigned char num)
 151          {
 152   1        IIC_Start();//发送开启信号
 153   1        IIC_SendByte(0xA0);//选择EEPROM芯片，确定写的模式
 154   1        IIC_WaitAck();//等待EEPROM反馈
 155   1        
 156   1        IIC_SendByte(addr);//写入要存储的数据地址
 157   1        IIC_WaitAck();//等待EEPROM反馈    
 158   1      
 159   1        while(num--)
 160   1        {
 161   2          IIC_SendByte(*EEPROM_String++);//将要写入的信息写入
 162   2          IIC_WaitAck();//等待EEPROM反馈    
 163   2          IIC_Delay(200); 
 164   2        }
 165   1        IIC_Stop();//停止发送 
 166   1      }
 167          
 168          
 169          //函数名：读EEPROM函数
 170          //入口参数：读到的数据需要存储的字符串，读取的地址(务必为8的倍数)，读取的数量
 171          //返回值：无
 172          //函数功能：读取EERPOM的某个地址中的数据，并存放在字符串数组中。
 173          void EEPROM_Read(unsigned char* EEPROM_String, unsigned char addr, unsigned char num)
 174          {
 175   1        IIC_Start();//发送开启信号
 176   1        IIC_SendByte(0xA0);//选择EEPROM芯片，确定写的模式
 177   1        IIC_WaitAck();//等待EEPROM反馈
 178   1        
C51 COMPILER V9.56.0.0   BSP_IIC                                                           03/01/2021 15:46:39 PAGE 4   

 179   1        IIC_SendByte(addr);//写入要读取的数据地址
 180   1        IIC_WaitAck();//等待EEPROM反馈    
 181   1      
 182   1        IIC_Start();//发送开启信号
 183   1        IIC_SendByte(0xA1);//选择EEPROM芯片，确定读的模式
 184   1        IIC_WaitAck();//等待EEPROM反馈  
 185   1        
 186   1        while(num--)
 187   1        {
 188   2          *EEPROM_String++ = IIC_RecByte();//将要写入的信息写入
 189   2          if(num) IIC_SendAck(0);//发送应答
 190   2            else IIC_SendAck(1);//不应答
 191   2        }
 192   1        
 193   1        IIC_Stop();//停止发送 
 194   1      }
 195          
 196          
 197          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    367    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
